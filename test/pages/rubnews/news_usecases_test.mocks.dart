// Mocks generated by Mockito 5.4.2 from annotations
// in campus_app/test/pages/rubnews/news_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:campus_app/core/failures.dart' as _i7;
import 'package:campus_app/pages/feed/news/astafeed_datasource.dart' as _i3;
import 'package:campus_app/pages/feed/news/news_entity.dart' as _i8;
import 'package:campus_app/pages/feed/news/news_repository.dart' as _i5;
import 'package:campus_app/pages/feed/news/rubnews_datasource.dart' as _i2;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRubnewsDatasource_0 extends _i1.SmartFake
    implements _i2.RubnewsDatasource {
  _FakeRubnewsDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAstaFeedDatasource_1 extends _i1.SmartFake
    implements _i3.AstaFeedDatasource {
  _FakeAstaFeedDatasource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RubnewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRubnewsRepository extends _i1.Mock implements _i5.RubnewsRepository {
  MockRubnewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RubnewsDatasource get rubnewsDatasource => (super.noSuchMethod(
        Invocation.getter(#rubnewsDatasource),
        returnValue: _FakeRubnewsDatasource_0(
          this,
          Invocation.getter(#rubnewsDatasource),
        ),
      ) as _i2.RubnewsDatasource);
  @override
  _i3.AstaFeedDatasource get astaFeedDatasource => (super.noSuchMethod(
        Invocation.getter(#astaFeedDatasource),
        returnValue: _FakeAstaFeedDatasource_1(
          this,
          Invocation.getter(#astaFeedDatasource),
        ),
      ) as _i3.AstaFeedDatasource);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.NewsEntity>>>
      getRemoteNewsfeed() => (super.noSuchMethod(
            Invocation.method(
              #getRemoteNewsfeed,
              [],
            ),
            returnValue:
                _i6.Future<_i4.Either<_i7.Failure, List<_i8.NewsEntity>>>.value(
                    _FakeEither_2<_i7.Failure, List<_i8.NewsEntity>>(
              this,
              Invocation.method(
                #getRemoteNewsfeed,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.NewsEntity>>>);
  @override
  _i4.Either<_i7.Failure, List<_i8.NewsEntity>> getCachedNewsfeed() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedNewsfeed,
          [],
        ),
        returnValue: _FakeEither_2<_i7.Failure, List<_i8.NewsEntity>>(
          this,
          Invocation.method(
            #getCachedNewsfeed,
            [],
          ),
        ),
      ) as _i4.Either<_i7.Failure, List<_i8.NewsEntity>>);
}
