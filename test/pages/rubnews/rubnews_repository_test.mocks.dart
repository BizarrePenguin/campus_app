// Mocks generated by Mockito 5.3.2 from annotations
// in campus_app/test/pages/rubnews/rubnews_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:campus_app/pages/rubnews/news_entity.dart' as _i7;
import 'package:campus_app/pages/rubnews/rubnews_datasource.dart' as _i5;
import 'package:dio/dio.dart' as _i2;
import 'package:hive/hive.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:xml/xml.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_1<E> extends _i1.SmartFake implements _i3.Box<E> {
  _FakeBox_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeXmlDocument_2 extends _i1.SmartFake implements _i4.XmlDocument {
  _FakeXmlDocument_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RubnewsDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRubnewsDatasource extends _i1.Mock implements _i5.RubnewsDatasource {
  MockRubnewsDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Dio);
  @override
  _i3.Box<dynamic> get rubnewsCach => (super.noSuchMethod(
        Invocation.getter(#rubnewsCach),
        returnValue: _FakeBox_1<dynamic>(
          this,
          Invocation.getter(#rubnewsCach),
        ),
      ) as _i3.Box<dynamic>);
  @override
  _i6.Future<_i4.XmlDocument> getNewsfeedAsXml() => (super.noSuchMethod(
        Invocation.method(
          #getNewsfeedAsXml,
          [],
        ),
        returnValue: _i6.Future<_i4.XmlDocument>.value(_FakeXmlDocument_2(
          this,
          Invocation.method(
            #getNewsfeedAsXml,
            [],
          ),
        )),
      ) as _i6.Future<_i4.XmlDocument>);
  @override
  _i6.Future<List<String>> getImageUrlsFromNewsUrl(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImageUrlsFromNewsUrl,
          [url],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);
  @override
  _i6.Future<void> writeNewsEntitiesToCach(List<_i7.NewsEntity>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeNewsEntitiesToCach,
          [entities],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  List<_i7.NewsEntity> readNewsEntitiesFromCach() => (super.noSuchMethod(
        Invocation.method(
          #readNewsEntitiesFromCach,
          [],
        ),
        returnValue: <_i7.NewsEntity>[],
      ) as List<_i7.NewsEntity>);
}
